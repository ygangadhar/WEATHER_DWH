<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/5/2019 4:53:59 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="MYLAPTOP"
  DTS:CreatorName="MYLAPTOP\ygang"
  DTS:DTSID="{ADF57D32-0271-40A2-9DA6-5F552000DEA7}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="16393"
  DTS:ObjectName="ForecastData_3Hours"
  DTS:PackageType="5"
  DTS:VersionBuild="16"
  DTS:VersionGUID="{4194F0DD-B83F-4725-9E22-9ED99704CE0E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CA56CECE-95E9-4EAF-A3D1-4E611A36895E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CitiID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D1D6D3C0-CEF3-42B9-94FB-63AD75D6A335}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CitiIDsList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A1476AD8-8B74-47D7-9FE8-DAA062ED3818}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Forecast_3h_URL">
      <DTS:VariableValue
        DTS:DataType="8">https://api.openweathermap.org/data/2.5/forecast?id=</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop  - Loop through Cities"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{C53FE475-38D0-4BF2-A3A2-F7A6D69B0D41}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop  - Loop through Cities">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{C497E18B-D87F-4B94-9A87-4F3837B8C26E}"
        DTS:ObjectName="{C497E18B-D87F-4B94-9A87-4F3837B8C26E}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::CitiIDsList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{1669ACBE-B60F-4700-A785-C201CDE6F49E}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="DFT - Load Forcast data - 3 hour"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="11">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String APIKey
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["APIKey"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 CitiID
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["CitiID"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Forecast3hURL
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Forecast_3h_URL"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Units
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Units"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */
        var forecastUrl = Variables.Forecast3hURL;
        var citiId = Variables.CitiID;
        var units = Variables.Units;
        var apiKey = Variables.APIKey; 

        //Set URL for the location 
        var apiUrl = forecastUrl + citiId + "&units=" + units + "&appid=" + apiKey;

        //Read file from web
        var textFromFile = (new System.Net.WebClient()).DownloadString(apiUrl);

        var data = new JavaScriptSerializer().Deserialize<RootObject>(textFromFile);

        foreach (var item in data.list)
        {
            foreach (var weather in item.weather)
            {
                Output0Buffer.AddRow();
                Output0Buffer.CitiID = item.sys.id;
                Output0Buffer.CitiName = item.name;
                Output0Buffer.Latitude = item.coord.lat;
                Output0Buffer.Longitude = item.coord.lon;
                Output0Buffer.CountryCode = item.sys.country;
                Output0Buffer.Sunrise = item.sys.sunrise;
                Output0Buffer.Sunset = item.sys.sunset;
                Output0Buffer.Cnt = data.cnt;
                Output0Buffer.WeatherID = weather.id;
                Output0Buffer.WeatherMain = weather.main;
                Output0Buffer.WeatherDescription = weather.description;
                Output0Buffer.WeatherIcon = weather.icon;
                Output0Buffer.Temparature = item.main.temp;
                Output0Buffer.Pressure = item.main.pressure;
                Output0Buffer.Humidity = item.main.humidity;
                Output0Buffer.TempMin = item.main.temp_min;
                Output0Buffer.TempMax = item.main.temp_max;
                Output0Buffer.Visibility = item.visibility;
                Output0Buffer.WindSpeed = item.wind.speed;
                Output0Buffer.WindDeg = item.wind.deg;
                Output0Buffer.Cloudiness = item.clouds.all;
                Output0Buffer.WindSpeed = item.dt;

            }
        }
    }
       public class city
    {
        public int id { get; set; }
        public int name { get; set; }
        public double timezone { get; set; }
        public string country { get; set; }
        public string lat { get; set; }
        public string lon { get; set; }
    }

    public class list
    { 

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }

    public class Main
    {
        public decimal temp { get; set; }
        public int pressure { get; set; }
        public int humidity { get; set; }
        public decimal temp_min { get; set; }
        public decimal temp_max { get; set; }
    }

    public class Wind
    {
        public decimal speed { get; set; }
        public decimal deg { get; set; }
    }

    public class Clouds
    {
        public int all { get; set; }
    }

    public class rain
    {
        public int 3h { get; set; }
    }

    public class WeatherData
    {
        public Coord coord { get; set; }
        public Sys sys { get; set; }
        public List<Weather> weather { get; set; }
        public Main main { get; set; }
        public int visibility { get; set; }
        public Wind wind { get; set; }
        public Clouds clouds { get; set; }
        public int dt { get; set; }
        public int id { get; set; }
        public string name { get; set; }
    }
    public class RootObject
    {
        public int cnt { get; set; }

        public List<WeatherData> list { get; set; }
    }
}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 CitiID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool CitiID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CitiName
    {
        set
        {
            this[1] = value;
        }
    }
    public bool CitiName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Latitude
    {
        set
        {
            this[2] = value;
        }
    }
    public bool Latitude_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Longitude
    {
        set
        {
            this[3] = value;
        }
    }
    public bool Longitude_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CountryCode
    {
        set
        {
            this[4] = value;
        }
    }
    public bool CountryCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TimeZone
    {
        set
        {
            this[5] = value;
        }
    }
    public bool TimeZone_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SunRise
    {
        set
        {
            this[6] = value;
        }
    }
    public bool SunRise_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SunSet
    {
        set
        {
            this[7] = value;
        }
    }
    public bool SunSet_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 Code
    {
        set
        {
            this[8] = value;
        }
    }
    public bool Code_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Message
    {
        set
        {
            this[9] = value;
        }
    }
    public bool Message_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 Cnt
    {
        set
        {
            this[10] = value;
        }
    }
    public bool Cnt_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal Temperature
    {
        set
        {
            this[11] = value;
        }
    }
    public bool Temperature_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal TempMin
    {
        set
        {
            this[12] = value;
        }
    }
    public bool TempMin_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal TempMax
    {
        set
        {
            this[13] = value;
        }
    }
    public bool TempMax_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 Pressure
    {
        set
        {
            this[14] = value;
        }
    }
    public bool Pressure_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal SeaLevel
    {
        set
        {
            this[15] = value;
        }
    }
    public bool SeaLevel_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal GroundLevel
    {
        set
        {
            this[16] = value;
        }
    }
    public bool GroundLevel_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 Humidity
    {
        set
        {
            this[17] = value;
        }
    }
    public bool Humidity_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal TempKF
    {
        set
        {
            this[18] = value;
        }
    }
    public bool TempKF_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 WeatherID
    {
        set
        {
            this[19] = value;
        }
    }
    public bool WeatherID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String WeatherMain
    {
        set
        {
            this[20] = value;
        }
    }
    public bool WeatherMain_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String WeatherDesc
    {
        set
        {
            this[21] = value;
        }
    }
    public bool WeatherDesc_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String WeatherIcon
    {
        set
        {
            this[22] = value;
        }
    }
    public bool WeatherIcon_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 Cloudiness
    {
        set
        {
            this[23] = value;
        }
    }
    public bool Cloudiness_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal WindSpeed
    {
        set
        {
            this[24] = value;
        }
    }
    public bool WindSpeed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal WindDeg
    {
        set
        {
            this[25] = value;
        }
    }
    public bool WindDeg_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal Rain3H
    {
        set
        {
            this[26] = value;
        }
    }
    public bool Rain3H_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Snow3H
    {
        set
        {
            this[27] = value;
        }
    }
    public bool Snow3H_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CalculationDate
    {
        set
        {
            this[28] = value;
        }
    }
    public bool CalculationDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(28);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_8279450bdbef4eb6bb78e8632ec19adc.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2B80E086-BABB-4611-BB53-C21D6448548D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_8279450bdbef4eb6bb78e8632ec19adc</RootNamespace>
    <AssemblyName>SC_8279450bdbef4eb6bb78e8632ec19adc</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Settings.get_Default():SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Sett" +
    "ings")]

namespace SC_8279450bdbef4eb6bb78e8632ec19adc.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_8279450bdbef4eb6bb78e8632ec19adc</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_8279450bdbef4eb6bb78e8632ec19adc</msb:DisplayName>
    <msb:ProjectId>{B618DD78-77B6-448E-9028-FFB7A1E0CAA2}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_8279450bdbef4eb6bb78e8632ec19adc.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_8279450bdbef4eb6bb78e8632ec19adc")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_8279450bdbef4eb6bb78e8632ec19adc")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_8279450bdbef4eb6bb78e8632ec19adc.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_8279450bdbef4eb6bb78e8632ec19adc.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_8279450bdbef4eb6bb78e8632ec19adc</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::CitiID,User::Forecast_3h_URL,$Project::APIKey,$Project::Units</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">CC</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CitiID]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CitiID]"
                          name="CitiID" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CitiName]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CitiName]"
                          name="CitiName" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Latitude]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Latitude]"
                          name="Latitude" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Longitude]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Longitude]"
                          name="Longitude" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CountryCode]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CountryCode]"
                          name="CountryCode" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TimeZone]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TimeZone]"
                          name="TimeZone" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SunRise]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SunRise]"
                          name="SunRise" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SunSet]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SunSet]"
                          name="SunSet" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Code]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Code]"
                          name="Code" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Message]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Message]"
                          name="Message" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Cnt]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Cnt]"
                          name="Cnt" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Temperature]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Temperature]"
                          name="Temperature" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TempMin]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TempMin]"
                          name="TempMin" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TempMax]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[TempMax]"
                          name="TempMax" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Pressure]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Pressure]"
                          name="Pressure" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SeaLevel]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[SeaLevel]"
                          name="SeaLevel" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[GroundLevel]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[GroundLevel]"
                          name="GroundLevel" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Humidity]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Humidity]"
                          name="Humidity" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Temp_KF]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Temp_KF]"
                          name="Temp_KF" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherID]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherID]"
                          name="WeatherID" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherMain]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherMain]"
                          name="WeatherMain" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherDesc]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherDesc]"
                          name="WeatherDesc" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherIcon]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WeatherIcon]"
                          name="WeatherIcon" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Cloudiness]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Cloudiness]"
                          name="Cloudiness" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WindSpeed]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WindSpeed]"
                          name="WindSpeed" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WindDeg]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[WindDeg]"
                          name="WindDeg" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Rain_3H]"
                          dataType="decimal"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Rain_3H]"
                          name="Rain_3H" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Snow_3H]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[Snow_3H]"
                          name="Snow_3H" />
                        <outputColumn
                          refId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CalculationDate]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component.Outputs[Output 0].Columns[CalculationDate]"
                          name="CalculationDate" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{A2B6E827-21E9-4DF2-BB0D-731675AE358B}"
          DTS:ObjectName="{A2B6E827-21E9-4DF2-BB0D-731675AE358B}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CitiID" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SQL - Get Citi ID List from DIM_Cities"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0D61712C-402C-4184-9658-7CD89D906767}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SQL - Get Citi ID List from DIM_Cities"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{2F0B9ABE-B0F6-4174-9360-6F341960A908}"
          SQLTask:SqlStatementSource="SELECT [CitiNK] FROM [WeatherDWH].[DIM].[Cities]"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="NewResultName"
            SQLTask:DtsVariableName="User::CitiIDsList" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{98AF96A4-8E80-4AAC-8C34-F09C5509D0F1}"
      DTS:From="Package\SQL - Get Citi ID List from DIM_Cities"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop  - Loop through Cities" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="234,42"
          Id="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour"
          TopLeft="40,25" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="308,139"
          Size="308,182"
          Id="Package\Foreach Loop  - Loop through Cities"
          TopLeft="266,197" />
        <NodeLayout
          Size="256,42"
          Id="Package\SQL - Get Citi ID List from DIM_Cities"
          TopLeft="284,88" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="412,130">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="8,67"
              Start="0,0"
              End="8,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="4,33.5" />
                  <mssgle:LineSegment
                    End="4,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="4,33.5"
                    Point2="8,33.5"
                    Point3="8,37.5" />
                  <mssgle:LineSegment
                    End="8,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="163,42"
          Id="Package\Foreach Loop  - Loop through Cities\DFT - Load Forcast data - 3 hour\Script Component"
          TopLeft="274,89" />
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>